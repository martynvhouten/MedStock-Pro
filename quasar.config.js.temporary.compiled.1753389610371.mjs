/* eslint-disable */
/**
 * THIS FILE IS GENERATED AUTOMATICALLY.
 * 1. DO NOT edit this file directly as it won't do anything.
 * 2. EDIT the original quasar.config file INSTEAD.
 * 3. DO NOT git commit this file. It should be ignored.
 *
 * This file is still here because there was an error in
 * the original quasar.config file and this allows you to
 * investigate the Node.js stack error.
 *
 * After you fix the original file, this file will be
 * deleted automatically.
 **/

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// quasar.config.js
import { configure } from "quasar/wrappers";
import ESLintPlugin from "eslint-webpack-plugin";
import { fileURLToPath, URL } from "node:url";
var __quasar_inject_import_meta_url__ = "file:///C:/Users/MartijnvanHoutenRemk/OneDrive%20-%20Remka%20B.V/Documenten/Remcura/quasar.config.js";
var quasar_config_default = configure(function(ctx) {
  return {
    eslint: {
      // fix: true,
      // include = [],
      // exclude = [],
      // rawOptions = {},
      warnings: false,
      errors: false
    },
    // https://v2.quasar.dev/quasar-cli-vite/boot-files
    boot: ["i18n", "supabase", "pinia", "theme"],
    // https://v2.quasar.dev/quasar-cli-vite/quasar-config-js#Property%3A-css
    css: ["app.scss"],
    // https://github.com/quasarframework/quasar/tree/dev/extras
    extras: [
      // Only include what we actually use
      "material-icons",
      // Keep only material icons
      "roboto-font"
      // Keep roboto font
      // Remove unused: mdi-v7, ionicons, etc.
    ],
    // Full list of options: https://v2.quasar.dev/quasar-cli-vite/quasar-config-js#Property%3A-build
    build: {
      target: {
        browser: ["es2019", "edge88", "firefox78", "chrome87", "safari13.1"],
        node: "node16"
      },
      vueRouterMode: "hash",
      // available values: 'hash', 'history'
      // vueRouterBase,
      // vueDevtools,
      // vueOptionsAPI: false,
      // rebuildCache: true, // rebuilds Vite/linter/etc cache on startup
      // publicPath: '/',
      // analyze: true,
      env: {
        SUPABASE_URL: process.env.SUPABASE_URL,
        SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY
      },
      // rawDefine: {}
      // ignorePublicFolder: true,
      // minify: false,
      // polyfillModulePreload: true,
      // distDir
      extendViteConf(viteConf) {
        Object.assign(viteConf.resolve.alias, {
          "@": fileURLToPath(new URL("./src", __quasar_inject_import_meta_url__))
        });
        viteConf.define = viteConf.define || {};
        viteConf.build = viteConf.build || {};
        viteConf.build.target = "es2018";
        viteConf.build.cssCodeSplit = true;
        viteConf.build.chunkSizeWarningLimit = 300;
        viteConf.build.assetsInlineLimit = 8192;
        viteConf.build.reportCompressedSize = false;
        viteConf.assetsInclude = [
          "**/*.svg",
          "**/*.png",
          "**/*.jpg",
          "**/*.jpeg",
          "**/*.gif",
          "**/*.webp"
        ];
        viteConf.css = viteConf.css || {};
        viteConf.css.devSourcemap = false;
        if (viteConf.command === "build") {
          viteConf.css.postcss = {
            plugins: [
              __require("@fullhuman/postcss-purgecss")({
                content: [
                  "./src/**/*.vue",
                  "./src/**/*.js",
                  "./src/**/*.ts",
                  "./src/**/*.html",
                  "./index.html"
                ],
                safelist: [
                  // Quasar classes
                  /^q-/,
                  /^Q/,
                  // Vue transition classes
                  /-(leave|enter|appear)(|-(to|from|active))$/,
                  /^(?!(|.*?:)cursor-move).+-move$/,
                  /^router-link(|-exact)-active$/,
                  // Dark mode classes
                  /^body--dark/,
                  // Dynamic classes
                  /^text-/,
                  /^bg-/,
                  /^border-/,
                  // Material icons
                  /^material-icons/,
                  // Notification classes
                  /notification/,
                  // Animation classes
                  /animate/
                ],
                variables: true,
                keyframes: true
              })
            ]
          };
        }
        viteConf.build.rollupOptions = viteConf.build.rollupOptions || {};
        viteConf.build.rollupOptions.output = {
          // Asset naming for better caching
          assetFileNames: (assetInfo) => {
            const info = assetInfo.name.split(".");
            const extType = info[info.length - 1];
            if (/\.(png|jpe?g|svg|gif|tiff|bmp|ico)$/i.test(assetInfo.name)) {
              return `assets/images/[name]-[hash][extname]`;
            }
            if (/\.(woff2?|eot|ttf|otf)$/i.test(assetInfo.name)) {
              return `assets/fonts/[name]-[hash][extname]`;
            }
            return `assets/[name]-[hash][extname]`;
          },
          // Manual chunking for optimal loading
          manualChunks: (id) => {
            if (id.includes("node_modules")) {
              if (id.includes("vue") && !id.includes("vue-router") && !id.includes("vue-i18n")) {
                return "vendor-vue";
              }
              if (id.includes("quasar")) {
                return "vendor-quasar";
              }
              if (id.includes("vue-router") || id.includes("pinia")) {
                return "vendor-router";
              }
              if (id.includes("@supabase")) {
                return "vendor-supabase";
              }
              if (id.includes("vue-i18n")) {
                return "vendor-i18n";
              }
              if (id.includes("@sentry")) {
                return "vendor-sentry";
              }
              return "vendor-misc";
            }
            if (id.includes("src/composables/")) {
              return "utils-core";
            }
            if (id.includes("src/services/")) {
              return "services";
            }
            if (id.includes("src/stores/")) {
              return "stores";
            }
            if (id.includes("src/components/") && !id.includes("src/pages/")) {
              return "components";
            }
            return null;
          }
        };
        viteConf.optimizeDeps = viteConf.optimizeDeps || {};
        viteConf.optimizeDeps.include = [
          "vue",
          "vue-router",
          "pinia",
          "quasar",
          "@supabase/supabase-js",
          "vue-i18n"
        ];
        viteConf.build.rollupOptions.treeshake = {
          moduleSideEffects: false,
          propertyReadSideEffects: false,
          tryCatchDeoptimization: false
        };
        if (viteConf.command === "build") {
          viteConf.build.minify = "terser";
          viteConf.build.terserOptions = {
            compress: {
              drop_console: true,
              drop_debugger: true,
              pure_funcs: [
                "console.log",
                "console.info",
                "console.debug",
                "console.warn"
              ]
            },
            mangle: {
              safari10: true
            }
          };
        }
      },
      // viteVuePluginOptions: {},
      vitePlugins: [
        [
          "@intlify/vite-plugin-vue-i18n",
          {
            // if you want to use Vue I18n Legacy API, you need to set `compositionOnly: false`
            // compositionOnly: false,
            // you need to set i18n resource including paths !
            include: "./src/i18n/**"
          }
        ]
      ]
    },
    // Full list of options: https://v2.quasar.dev/quasar-cli-vite/quasar-config-js#Property%3A-devServer
    devServer: {
      https: false,
      port: 8080,
      open: true
      // opens browser window automatically
    },
    // https://v2.quasar.dev/quasar-cli-vite/quasar-config-js#Property%3A-framework
    framework: {
      config: {
        dark: "auto",
        // or Boolean true/false or 'auto'
        brand: {
          primary: "#1e3a8a",
          // Deep Medical Blue
          secondary: "#0f766e",
          // Deep Teal
          accent: "#0d9488",
          // Medical Teal Accent
          dark: "#1c1917",
          "dark-page": "#0a0a0a",
          positive: "#065f46",
          // Deep Emerald
          negative: "#b91c1c",
          // Deep Red
          info: "#1e40af",
          // Rich Blue
          warning: "#d97706"
          // Professional Orange
        }
      },
      // iconSet: 'material-icons', // Quasar icon set
      // lang: 'en-US', // Quasar language pack
      // Enable tree-shaking by only importing components we actually use
      components: [
        "QLayout",
        "QHeader",
        "QDrawer",
        "QPage",
        "QToolbar",
        "QBtn",
        "QBtnGroup",
        "QIcon",
        "QList",
        "QItem",
        "QItemSection",
        "QItemLabel",
        "QCard",
        "QCardSection",
        "QInput",
        "QSelect",
        "QTable",
        "QTd",
        "QTh",
        "QBadge",
        "QChip",
        "QSeparator",
        "QSpace",
        "QBanner",
        "QDialog",
        "QForm",
        "QToggle",
        "QAvatar",
        "QBtnDropdown",
        "QMenu",
        "QTooltip",
        "QLinearProgress",
        "QTabs",
        "QTab",
        "QTabPanels",
        "QTabPanel",
        "QOptionGroup"
      ],
      // directives: [],
      // Quasar plugins
      plugins: [
        "Notify",
        "Dialog",
        "Loading",
        "LoadingBar",
        "Dark",
        "LocalStorage",
        "SessionStorage"
      ]
    },
    // animations: 'all', // --- includes all animations
    // https://quasar.dev/options/animations
    animations: [],
    // https://v2.quasar.dev/quasar-cli-vite/developing-ssr/configuring-ssr
    ssr: {
      pwa: false,
      // manualStoreHydration: true,
      // manualPostHydrationTrigger: true,
      prodPort: 3e3,
      // The default port that the production server should use
      // (gets superseded if process.env.PORT is specified at runtime)
      maxAge: 1e3 * 60 * 60 * 24 * 30,
      // Tell browser when a file from the server should expire from cache (in ms)
      chainWebpackWebserver(chain) {
        chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
      },
      middlewares: [
        ctx.prod ? "compression" : "",
        "render"
        // keep this as last one
      ]
    },
    // https://v2.quasar.dev/quasar-cli-vite/developing-pwa/configuring-pwa
    pwa: {
      workboxPluginMode: "GenerateSW",
      // 'GenerateSW' or 'InjectManifest'
      workboxOptions: {},
      // only for GenerateSW
      // for the custom service worker ONLY (/src-pwa/custom-service-worker.[js|ts])
      // if using workbox in InjectManifest mode
      chainWebpackCustomSW(chain) {
        chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
      },
      manifest: {
        name: `Remcura`,
        short_name: `Remcura`,
        description: `Professional medical supply inventory management system`,
        display: "standalone",
        orientation: "portrait",
        background_color: "#E6E6E6",
        theme_color: "#9E0059",
        icons: [
          {
            src: "icons/icon-128x128.png",
            sizes: "128x128",
            type: "image/png"
          },
          {
            src: "icons/icon-192x192.png",
            sizes: "192x192",
            type: "image/png"
          },
          {
            src: "icons/icon-256x256.png",
            sizes: "256x256",
            type: "image/png"
          },
          {
            src: "icons/icon-384x384.png",
            sizes: "384x384",
            type: "image/png"
          },
          {
            src: "icons/icon-512x512.png",
            sizes: "512x512",
            type: "image/png"
          }
        ]
      }
    },
    // Full list of options: https://v2.quasar.dev/quasar-cli-vite/developing-cordova-apps/configuring-cordova
    cordova: {
      // noIosLegacyBuildFlag: true, // uncomment only if you know what you are doing
    },
    // Full list of options: https://v2.quasar.dev/quasar-cli-vite/developing-capacitor-apps/configuring-capacitor
    capacitor: {
      hideSplashscreen: true
    },
    // Full list of options: https://v2.quasar.dev/quasar-cli-vite/developing-electron-apps/configuring-electron
    electron: {
      bundler: "packager",
      // 'packager' or 'builder'
      packager: {
        // https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#options
        // OS X / Mac App Store
        // appBundleId: '',
        // appCategoryType: '',
        // osxSign: '',
        // protocol: 'myapp://path',
        // Windows only
        // win32metadata: { ... }
      },
      builder: {
        // https://www.electron.build/configuration/configuration
        appId: "remcura"
      },
      // "chain" is a webpack-chain object https://github.com/neutrinojs/webpack-chain
      chainWebpackMain(chain) {
        chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
      },
      // "chain" is a webpack-chain object https://github.com/neutrinojs/webpack-chain
      chainWebpackPreload(chain) {
        chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
      }
    }
  };
});
export {
  quasar_config_default as default
};
